{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangt\\\\OneDrive\\\\Sang Shares Something\\\\sss-official\\\\sssomething_offical\\\\src\\\\components\\\\Editor\\\\QuillEditor.js\";\nimport React from 'react';\nimport ReactQuill, { Quill } from 'react-quill';\nimport \"react-quill/dist/quill.snow.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false; // Quill.register('modules/clipboard', PlainClipboard, true);\n\n\nconst QuillClipboard = Quill.import('modules/clipboard');\n\nclass Clipboard extends QuillClipboard {\n  constructor(...args) {\n    super(...args);\n\n    this.getMetaTagElements = stringContent => {\n      const el = document.createElement('div');\n      el.innerHTML = stringContent;\n      return el.getElementsByTagName('meta');\n    };\n  }\n\n  async onPaste(e) {\n    let clipboardData = e.clipboardData || window.clipboardData;\n    let pastedData = await clipboardData.getData('Text');\n    const urlMatches = pastedData.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n\n    if (urlMatches.length > 0) {\n      e.preventDefault();\n      urlMatches.forEach(link => {\n        axios.get(link).then(payload => {\n          // let title, image, url, description;\n          let title, image, url;\n\n          for (let node of this.getMetaTagElements(payload)) {\n            if (node.getAttribute(\"property\") === \"og:title\") {\n              title = node.getAttribute(\"content\");\n            }\n\n            if (node.getAttribute(\"property\") === \"og:image\") {\n              image = node.getAttribute(\"content\");\n            }\n\n            if (node.getAttribute(\"property\") === \"og:url\") {\n              url = node.getAttribute(\"content\");\n            } // if (node.getAttribute(\"property\") === \"og:description\") {\n            //     description = node.getAttribute(\"content\");\n            // }\n\n          }\n\n          const rendered = `<a href=${url} target=\"_blank\"><div><img src=${image} alt=${title} width=\"20%\"/><span>${title}</span></div></a>`;\n          let range = this.quill.getSelection();\n          let position = range ? range.index : 0;\n          this.quill.pasteHTML(position, rendered, 'silent');\n          this.quill.setSelection(position + rendered.length);\n        }).catch(error => console.error(error));\n      });\n    } else {\n      //console.log('when to use this') 보통 다른 곳에서  paste 한다음에  copy하면 이쪽 걸로 한다. \n      super.onPaste(e);\n    }\n  }\n\n}\n\nQuill.register('modules/clipboard', Clipboard, true);\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass ImageBlot extends BlockEmbed {\n  static create(value) {\n    const imgTag = super.create();\n    imgTag.setAttribute('src', value.src);\n    imgTag.setAttribute('alt', value.alt);\n    imgTag.setAttribute('width', '100%');\n    return imgTag;\n  }\n\n  static value(node) {\n    return {\n      src: node.getAttribute('src'),\n      alt: node.getAttribute('alt')\n    };\n  }\n\n}\n\nImageBlot.blotName = 'image';\nImageBlot.tagName = 'img';\nQuill.register(ImageBlot);\n\nclass VideoBlot extends BlockEmbed {\n  static create(value) {\n    if (value && value.src) {\n      const videoTag = super.create();\n      videoTag.setAttribute('src', value.src);\n      videoTag.setAttribute('title', value.title);\n      videoTag.setAttribute('width', '100%');\n      videoTag.setAttribute('controls', '');\n      return videoTag;\n    } else {\n      const iframeTag = document.createElement('iframe');\n      iframeTag.setAttribute('src', value);\n      iframeTag.setAttribute('frameborder', '0');\n      iframeTag.setAttribute('allowfullscreen', true);\n      iframeTag.setAttribute('width', '100%');\n      return iframeTag;\n    }\n  }\n\n  static value(node) {\n    if (node.getAttribute('title')) {\n      return {\n        src: node.getAttribute('src'),\n        alt: node.getAttribute('title')\n      };\n    } else {\n      return node.getAttribute('src');\n    } // return { src: node.getAttribute('src'), alt: node.getAttribute('title') };\n\n  }\n\n}\n\nVideoBlot.blotName = 'video';\nVideoBlot.tagName = 'video';\nQuill.register(VideoBlot);\n\nclass FileBlot extends BlockEmbed {\n  static create(value) {\n    const prefixTag = document.createElement('span');\n    prefixTag.innerText = \"첨부파일 - \";\n    const bTag = document.createElement('b'); //위에 첨부파일 글자 옆에  파일 이름이 b 태그를 사용해서 나온다.\n\n    bTag.innerText = value;\n    const linkTag = document.createElement('a');\n    linkTag.setAttribute('href', value);\n    linkTag.setAttribute(\"target\", \"_blank\");\n    linkTag.setAttribute(\"className\", \"file-link-inner-post\");\n    linkTag.appendChild(bTag); //linkTag 이런식으로 나온다 <a href=\"btn_editPic@3x.png\" target=\"_blank\" classname=\"file-link-inner-post\"><b>btn_editPic@3x.png</b></a>\n\n    const node = super.create();\n    node.appendChild(prefixTag);\n    node.appendChild(linkTag);\n    return node;\n  }\n\n  static value(node) {\n    const linkTag = node.querySelector('a');\n    return linkTag.getAttribute('href');\n  }\n\n}\n\nFileBlot.blotName = 'file';\nFileBlot.tagName = 'p';\nFileBlot.className = 'file-inner-post';\nQuill.register(FileBlot);\n\nclass PollBlot extends BlockEmbed {\n  static create(value) {\n    const prefixTag = document.createElement('span');\n    prefixTag.innerText = \"투표 - \";\n    const bTag = document.createElement('b');\n    bTag.innerText = value.title;\n    const node = super.create();\n    node.setAttribute('id', value.id);\n    node.appendChild(prefixTag);\n    node.appendChild(bTag);\n    return node;\n  }\n\n  static value(node) {\n    const id = node.getAttribute('id');\n    const bTag = node.querySelector('b');\n    const title = bTag.innerText;\n    return {\n      id,\n      title\n    };\n  }\n\n}\n\nPollBlot.blotName = 'poll';\nPollBlot.tagName = 'p';\nPollBlot.className = 'poll-inner-post';\nQuill.register(PollBlot);\n\nclass QuillEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = html => {\n      console.log('html', html); // https://youtu.be/BbR-QCoKngE\n      // https://www.youtube.com/embed/ZwKhufmMxko\n      // https://tv.naver.com/v/9176888\n      // renderToStaticMarkup(ReactHtmlParser(html, options));\n\n      this.setState({\n        editorHtml: html\n      }, () => {\n        this.props.onEditorChange(this.state.editorHtml);\n      });\n    };\n\n    this.imageHandler = () => {\n      this.inputOpenImageRef.current.click();\n    };\n\n    this.videoHandler = () => {\n      this.inputOpenVideoRef.current.click();\n    };\n\n    this.fileHandler = () => {\n      this.inputOpenFileRef.current.click();\n    };\n\n    this.insertImage = e => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n        const file = e.currentTarget.files[0];\n        let formData = new FormData();\n        const config = {\n          header: {\n            'content-type': 'multipart/form-data'\n          }\n        };\n        formData.append(\"file\", file);\n        axios.post('/api/blog/uploadfiles', formData, config).then(response => {\n          if (response.data.success) {\n            const quill = this.reactQuillRef.getEditor();\n            quill.focus();\n            let range = quill.getSelection();\n            let position = range ? range.index : 0; //먼저 노드 서버에다가 이미지를 넣은 다음에   여기 아래에 src에다가 그걸 넣으면 그게 \n            //이미지 블롯으로 가서  크리에이트가 이미지를 형성 하며 그걸 발류에서     src 랑 alt 를 가져간후에  editorHTML에 다가 넣는다.\n\n            quill.insertEmbed(position, \"image\", {\n              src: \"http://localhost:5000/\" + response.data.url,\n              alt: response.data.fileName\n            });\n            quill.setSelection(position + 1);\n\n            if (this._isMounted) {\n              this.setState({\n                files: [...this.state.files, file]\n              }, () => {\n                this.props.onFilesChange(this.state.files);\n              });\n            }\n          } else {\n            return alert('failed to upload file');\n          }\n        });\n      }\n    };\n\n    this.insertVideo = e => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n        const file = e.currentTarget.files[0];\n        let formData = new FormData();\n        const config = {\n          header: {\n            'content-type': 'multipart/form-data'\n          }\n        };\n        formData.append(\"file\", file);\n        axios.post('/api/blog/uploadfiles', formData, config).then(response => {\n          if (response.data.success) {\n            const quill = this.reactQuillRef.getEditor();\n            quill.focus();\n            let range = quill.getSelection();\n            let position = range ? range.index : 0;\n            quill.insertEmbed(position, \"video\", {\n              src: \"http://localhost:5000/\" + response.data.url,\n              title: response.data.fileName\n            });\n            quill.setSelection(position + 1);\n\n            if (this._isMounted) {\n              this.setState({\n                files: [...this.state.files, file]\n              }, () => {\n                this.props.onFilesChange(this.state.files);\n              });\n            }\n          } else {\n            return alert('failed to upload file');\n          }\n        });\n      }\n    };\n\n    this.insertFile = e => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n        const file = e.currentTarget.files[0];\n        console.log(file);\n        let formData = new FormData();\n        const config = {\n          header: {\n            'content-type': 'multipart/form-data'\n          }\n        };\n        formData.append(\"file\", file);\n        axios.post('/api/blog/uploadfiles', formData, config).then(response => {\n          if (response.data.success) {\n            const quill = this.reactQuillRef.getEditor();\n            quill.focus();\n            let range = quill.getSelection();\n            let position = range ? range.index : 0;\n            quill.insertEmbed(position, \"file\", response.data.fileName);\n            quill.setSelection(position + 1);\n\n            if (this._isMounted) {\n              this.setState({\n                files: [...this.state.files, file]\n              }, () => {\n                this.props.onFilesChange(this.state.files);\n              });\n            }\n          }\n\n          ;\n        });\n      }\n    };\n\n    this.modules = {\n      // syntax: true,\n      toolbar: {\n        container: \"#toolbar\",\n        //id =\"toorbar\"는  그 위에 B I U S I V F P 이거 있는 곳이다. \n        handlers: {\n          insertImage: this.imageHandler,\n          insertVideo: this.videoHandler,\n          insertFile: this.fileHandler,\n          insertPoll: this.pollHandler\n        }\n      }\n    };\n    this.formats = ['header', 'bold', 'italic', 'underline', 'strike', 'image', 'video', 'file', 'link', \"code-block\", \"video\", \"blockquote\", \"clean\"];\n    this.state = {\n      editorHtml: __ISMSIE__ ? \"<p>&nbsp;</p>\" : \"\",\n      files: []\n    };\n    this.reactQuillRef = null;\n    this.inputOpenImageRef = /*#__PURE__*/React.createRef();\n    this.inputOpenVideoRef = /*#__PURE__*/React.createRef();\n    this.inputOpenFileRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"toolbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"ql-header\",\n          defaultValue: \"\",\n          onChange: e => e.persist(),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-italic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-underline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-strike\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertImage\",\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertVideo\",\n          children: \"V\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertFile\",\n          children: \"F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-code-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-blockquote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-clean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        ref: el => {\n          this.reactQuillRef = el;\n        },\n        theme: 'snow',\n        onChange: this.handleChange,\n        modules: this.modules,\n        formats: this.formats,\n        value: this.state.editorHtml,\n        placeholder: this.props.placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ref: this.inputOpenImageRef,\n        style: {\n          display: \"none\"\n        },\n        onChange: this.insertImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        ref: this.inputOpenVideoRef,\n        style: {\n          display: \"none\"\n        },\n        onChange: this.insertVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"*\",\n        ref: this.inputOpenFileRef,\n        style: {\n          display: \"none\"\n        },\n        onChange: this.insertFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default QuillEditor;","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/sssomething_offical/src/components/Editor/QuillEditor.js"],"names":["React","ReactQuill","Quill","axios","__ISMSIE__","navigator","userAgent","match","QuillClipboard","import","Clipboard","getMetaTagElements","stringContent","el","document","createElement","innerHTML","getElementsByTagName","onPaste","e","clipboardData","window","pastedData","getData","urlMatches","length","preventDefault","forEach","link","get","then","payload","title","image","url","node","getAttribute","rendered","range","quill","getSelection","position","index","pasteHTML","setSelection","catch","error","console","register","BlockEmbed","ImageBlot","create","value","imgTag","setAttribute","src","alt","blotName","tagName","VideoBlot","videoTag","iframeTag","FileBlot","prefixTag","innerText","bTag","linkTag","appendChild","querySelector","className","PollBlot","id","QuillEditor","Component","constructor","props","handleChange","html","log","setState","editorHtml","onEditorChange","state","imageHandler","inputOpenImageRef","current","click","videoHandler","inputOpenVideoRef","fileHandler","inputOpenFileRef","insertImage","stopPropagation","currentTarget","files","file","formData","FormData","config","header","append","post","response","data","success","reactQuillRef","getEditor","focus","insertEmbed","fileName","_isMounted","onFilesChange","alert","insertVideo","insertFile","modules","toolbar","container","handlers","insertPoll","pollHandler","formats","createRef","componentDidMount","componentWillUnmount","render","persist","placeholder","display"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactQuill, { Quill } from 'react-quill';\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\nimport axios from 'axios';\r\nconst __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\r\n\r\n// Quill.register('modules/clipboard', PlainClipboard, true);\r\n\r\nconst QuillClipboard = Quill.import('modules/clipboard');\r\n\r\nclass Clipboard extends QuillClipboard {\r\n\r\n    getMetaTagElements = (stringContent) => {\r\n        const el = document.createElement('div');\r\n        el.innerHTML = stringContent;\r\n        return el.getElementsByTagName('meta');\r\n    };\r\n\r\n    async onPaste(e) {\r\n        let clipboardData = e.clipboardData || window.clipboardData;\r\n        let pastedData = await clipboardData.getData('Text');\r\n\r\n        const urlMatches = pastedData.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\r\n        if (urlMatches.length > 0) {\r\n            e.preventDefault();\r\n            urlMatches.forEach(link => {\r\n                axios.get(link)\r\n                    .then(payload => {\r\n                        // let title, image, url, description;\r\n                        let title, image, url;\r\n                        for (let node of this.getMetaTagElements(payload)) {\r\n                            if (node.getAttribute(\"property\") === \"og:title\") {\r\n                                title = node.getAttribute(\"content\");\r\n                            }\r\n                            if (node.getAttribute(\"property\") === \"og:image\") {\r\n                                image = node.getAttribute(\"content\");\r\n                            }\r\n                            if (node.getAttribute(\"property\") === \"og:url\") {\r\n                                url = node.getAttribute(\"content\");\r\n                            }\r\n                            // if (node.getAttribute(\"property\") === \"og:description\") {\r\n                            //     description = node.getAttribute(\"content\");\r\n                            // }\r\n                        }\r\n\r\n                        const rendered = `<a href=${url} target=\"_blank\"><div><img src=${image} alt=${title} width=\"20%\"/><span>${title}</span></div></a>`;\r\n\r\n                        let range = this.quill.getSelection();\r\n                        let position = range ? range.index : 0;\r\n                        this.quill.pasteHTML(position, rendered, 'silent');\r\n                        this.quill.setSelection(position + rendered.length);\r\n                    })\r\n                    .catch(error => console.error(error));\r\n            });\r\n\r\n        } else {\r\n            //console.log('when to use this') 보통 다른 곳에서  paste 한다음에  copy하면 이쪽 걸로 한다. \r\n            super.onPaste(e);\r\n        }\r\n    }\r\n\r\n}\r\nQuill.register('modules/clipboard', Clipboard, true);\r\n\r\nconst BlockEmbed = Quill.import('blots/block/embed');\r\n\r\nclass ImageBlot extends BlockEmbed {\r\n\r\n    static create(value) {\r\n        const imgTag = super.create();\r\n        imgTag.setAttribute('src', value.src);\r\n        imgTag.setAttribute('alt', value.alt);\r\n        imgTag.setAttribute('width', '100%');\r\n        return imgTag;\r\n    }\r\n\r\n    static value(node) {\r\n        return { src: node.getAttribute('src'), alt: node.getAttribute('alt') };\r\n    }\r\n\r\n}\r\n\r\nImageBlot.blotName = 'image';\r\nImageBlot.tagName = 'img';\r\nQuill.register(ImageBlot);\r\n\r\nclass VideoBlot extends BlockEmbed {\r\n\r\n    static create(value) {\r\n        if (value && value.src) {\r\n            const videoTag = super.create();\r\n            videoTag.setAttribute('src', value.src);\r\n            videoTag.setAttribute('title', value.title);\r\n            videoTag.setAttribute('width', '100%');\r\n            videoTag.setAttribute('controls', '');\r\n\r\n            return videoTag;\r\n        } else {\r\n            const iframeTag = document.createElement('iframe');\r\n            iframeTag.setAttribute('src', value);\r\n            iframeTag.setAttribute('frameborder', '0');\r\n            iframeTag.setAttribute('allowfullscreen', true);\r\n            iframeTag.setAttribute('width', '100%');\r\n            return iframeTag;\r\n        }\r\n    }\r\n\r\n    static value(node) {\r\n        if (node.getAttribute('title')) {\r\n            return { src: node.getAttribute('src'), alt: node.getAttribute('title') };\r\n        } else {\r\n            return node.getAttribute('src');\r\n        }\r\n        // return { src: node.getAttribute('src'), alt: node.getAttribute('title') };\r\n    }\r\n\r\n}\r\n\r\nVideoBlot.blotName = 'video';\r\nVideoBlot.tagName = 'video';\r\nQuill.register(VideoBlot);\r\n\r\nclass FileBlot extends BlockEmbed {\r\n\r\n    static create(value) {\r\n        const prefixTag = document.createElement('span');\r\n        prefixTag.innerText = \"첨부파일 - \";\r\n\r\n        const bTag = document.createElement('b');\r\n        //위에 첨부파일 글자 옆에  파일 이름이 b 태그를 사용해서 나온다.\r\n        bTag.innerText = value;\r\n\r\n        const linkTag = document.createElement('a');\r\n        linkTag.setAttribute('href', value);\r\n        linkTag.setAttribute(\"target\", \"_blank\");\r\n        linkTag.setAttribute(\"className\", \"file-link-inner-post\");\r\n        linkTag.appendChild(bTag);\r\n        //linkTag 이런식으로 나온다 <a href=\"btn_editPic@3x.png\" target=\"_blank\" classname=\"file-link-inner-post\"><b>btn_editPic@3x.png</b></a>\r\n\r\n        const node = super.create();\r\n        node.appendChild(prefixTag);\r\n        node.appendChild(linkTag);\r\n\r\n        return node;\r\n    }\r\n\r\n    static value(node) {\r\n        const linkTag = node.querySelector('a');\r\n        return linkTag.getAttribute('href');\r\n    }\r\n\r\n}\r\n\r\nFileBlot.blotName = 'file';\r\nFileBlot.tagName = 'p';\r\nFileBlot.className = 'file-inner-post';\r\nQuill.register(FileBlot);\r\n\r\nclass PollBlot extends BlockEmbed {\r\n\r\n    static create(value) {\r\n        const prefixTag = document.createElement('span');\r\n        prefixTag.innerText = \"투표 - \";\r\n\r\n        const bTag = document.createElement('b');\r\n        bTag.innerText = value.title;\r\n\r\n        const node = super.create();\r\n        node.setAttribute('id', value.id);\r\n        node.appendChild(prefixTag);\r\n        node.appendChild(bTag);\r\n\r\n        return node;\r\n    }\r\n\r\n    static value(node) {\r\n        const id = node.getAttribute('id');\r\n        const bTag = node.querySelector('b');\r\n        const title = bTag.innerText;\r\n        return { id, title };\r\n    }\r\n\r\n}\r\n\r\nPollBlot.blotName = 'poll';\r\nPollBlot.tagName = 'p';\r\nPollBlot.className = 'poll-inner-post';\r\nQuill.register(PollBlot);\r\n\r\nclass QuillEditor extends React.Component {\r\n\r\n    bandId;\r\n    placeholder;\r\n    onEditorChange;\r\n    onFilesChange;\r\n    onPollsChange;\r\n    _isMounted;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editorHtml: __ISMSIE__ ? \"<p>&nbsp;</p>\" : \"\",\r\n            files: [],\r\n        };\r\n\r\n        this.reactQuillRef = null;\r\n\r\n        this.inputOpenImageRef = React.createRef();\r\n        this.inputOpenVideoRef = React.createRef();\r\n        this.inputOpenFileRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    handleChange = (html) => {\r\n        console.log('html', html)\r\n        // https://youtu.be/BbR-QCoKngE\r\n        // https://www.youtube.com/embed/ZwKhufmMxko\r\n        // https://tv.naver.com/v/9176888\r\n        // renderToStaticMarkup(ReactHtmlParser(html, options));\r\n\r\n        this.setState({\r\n            editorHtml: html\r\n        }, () => {\r\n            this.props.onEditorChange(this.state.editorHtml);\r\n        });\r\n    };\r\n\r\n    // I V F P들을  눌렀을떄 insertImage: this.imageHandler로 가서  거기서 inputOpenImageRef를 클릭 시킨다. \r\n    imageHandler = () => {\r\n        this.inputOpenImageRef.current.click();\r\n    };\r\n\r\n    videoHandler = () => {\r\n        this.inputOpenVideoRef.current.click();\r\n    };\r\n\r\n    fileHandler = () => {\r\n        this.inputOpenFileRef.current.click();\r\n    };\r\n\r\n\r\n    insertImage = (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\r\n            const file = e.currentTarget.files[0];\r\n\r\n            let formData = new FormData();\r\n            const config = {\r\n                header: { 'content-type': 'multipart/form-data' }\r\n            }\r\n            formData.append(\"file\", file);\r\n\r\n            axios.post('/api/blog/uploadfiles', formData, config)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const quill = this.reactQuillRef.getEditor();\r\n                        quill.focus();\r\n\r\n                        let range = quill.getSelection();\r\n                        let position = range ? range.index : 0;\r\n\r\n                        //먼저 노드 서버에다가 이미지를 넣은 다음에   여기 아래에 src에다가 그걸 넣으면 그게 \r\n                        //이미지 블롯으로 가서  크리에이트가 이미지를 형성 하며 그걸 발류에서     src 랑 alt 를 가져간후에  editorHTML에 다가 넣는다.\r\n                        quill.insertEmbed(position, \"image\", { src: \"http://localhost:5000/\" + response.data.url, alt: response.data.fileName });\r\n                        quill.setSelection(position + 1);\r\n\r\n                        if (this._isMounted) {\r\n                            this.setState({\r\n                                files: [...this.state.files, file]\r\n                            }, () => { this.props.onFilesChange(this.state.files) });\r\n                        }\r\n                    } else {\r\n                        return alert('failed to upload file')\r\n                    }\r\n                })\r\n        }\r\n    };\r\n\r\n    insertVideo = (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\r\n            const file = e.currentTarget.files[0];\r\n\r\n            let formData = new FormData();\r\n            const config = {\r\n                header: { 'content-type': 'multipart/form-data' }\r\n            }\r\n            formData.append(\"file\", file);\r\n\r\n            axios.post('/api/blog/uploadfiles', formData, config)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const quill = this.reactQuillRef.getEditor();\r\n                        quill.focus();\r\n\r\n                        let range = quill.getSelection();\r\n                        let position = range ? range.index : 0;\r\n                        quill.insertEmbed(position, \"video\", { src: \"http://localhost:5000/\" + response.data.url, title: response.data.fileName });\r\n                        quill.setSelection(position + 1);\r\n\r\n                        if (this._isMounted) {\r\n                            this.setState({\r\n                                files: [...this.state.files, file]\r\n                            }, () => { this.props.onFilesChange(this.state.files) });\r\n                        }\r\n                    } else {\r\n                        return alert('failed to upload file')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    insertFile = (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\r\n            const file = e.currentTarget.files[0];\r\n            console.log(file);\r\n\r\n            let formData = new FormData();\r\n            const config = {\r\n                header: { 'content-type': 'multipart/form-data' }\r\n            }\r\n            formData.append(\"file\", file);\r\n\r\n            axios.post('/api/blog/uploadfiles', formData, config)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n\r\n                        const quill = this.reactQuillRef.getEditor();\r\n                        quill.focus();\r\n\r\n                        let range = quill.getSelection();\r\n                        let position = range ? range.index : 0;\r\n                        quill.insertEmbed(position, \"file\", response.data.fileName);\r\n                        quill.setSelection(position + 1);\r\n\r\n                        if (this._isMounted) {\r\n                            this.setState({\r\n                                files: [...this.state.files, file]\r\n                            }, () => { this.props.onFilesChange(this.state.files) });\r\n                        }\r\n                    };\r\n                })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"toolbar\">\r\n                    <select className=\"ql-header\" defaultValue={\"\"} onChange={e => e.persist()}>\r\n                        <option value=\"1\" />\r\n                        <option value=\"2\" />\r\n                        <option value=\"\" />\r\n                    </select>\r\n                    <button className=\"ql-bold\" />\r\n                    <button className=\"ql-italic\" />\r\n                    <button className=\"ql-underline\" />\r\n                    <button className=\"ql-strike\" />\r\n                    <button className=\"ql-insertImage\">\r\n                        I\r\n                    </button>\r\n                    <button className=\"ql-insertVideo\">\r\n                        V\r\n                    </button>\r\n                    <button className=\"ql-insertFile\">\r\n                        F\r\n                    </button>\r\n                    <button className=\"ql-link\" />\r\n                    <button className=\"ql-code-block\" />\r\n                    <button className=\"ql-video\" />\r\n                    <button className=\"ql-blockquote\" />\r\n                    <button className=\"ql-clean\" />\r\n\r\n                    \r\n\r\n                </div>\r\n                <ReactQuill\r\n                    ref={(el) => { this.reactQuillRef = el }}\r\n                    theme={'snow'}\r\n                    onChange={this.handleChange}\r\n                    modules={this.modules}\r\n                    formats={this.formats}\r\n                    value={this.state.editorHtml}\r\n                    placeholder={this.props.placeholder}\r\n                />\r\n                <input type=\"file\" accept=\"image/*\" ref={this.inputOpenImageRef} style={{ display: \"none\" }} onChange={this.insertImage} />\r\n                <input type=\"file\" accept=\"video/*\" ref={this.inputOpenVideoRef} style={{ display: \"none\" }} onChange={this.insertVideo} />\r\n                <input type=\"file\" accept=\"*\" ref={this.inputOpenFileRef} style={{ display: \"none\" }} onChange={this.insertFile} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    modules = {\r\n        // syntax: true,\r\n        toolbar: {\r\n            container: \"#toolbar\",\r\n            //id =\"toorbar\"는  그 위에 B I U S I V F P 이거 있는 곳이다. \r\n            handlers: {\r\n                insertImage: this.imageHandler,\r\n                insertVideo: this.videoHandler,\r\n                insertFile: this.fileHandler,\r\n                insertPoll: this.pollHandler,\r\n            }\r\n        },\r\n\r\n    };\r\n\r\n    formats = [\r\n        'header',\r\n        'bold', 'italic', 'underline', 'strike',\r\n        'image', 'video', 'file', 'link',\"code-block\", \"video\", \"blockquote\", \"clean\"\r\n    ];\r\n}\r\n\r\nexport default QuillEditor;"]},"metadata":{},"sourceType":"module"}