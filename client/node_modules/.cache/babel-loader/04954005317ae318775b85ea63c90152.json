{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguageediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TextPartLanguageCommand from './textpartlanguagecommand';\nimport { stringifyLanguageAttribute, parseLanguageAttribute } from './utils';\n/**\n * The text part language editing.\n *\n * Introduces the `'textPartLanguage'` command and the `'language'` model element attribute.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TextPartLanguageEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TextPartLanguageEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor); // Text part language options are only used to ensure that the feature works by default.\n    // In the real usage it should be reconfigured by a developer. We are not providing\n    // translations for `title` properties on purpose, as it's only an example configuration.\n\n    editor.config.define('language', {\n      textPartLanguage: [{\n        title: 'English',\n        languageCode: 'en'\n      }, {\n        title: 'German',\n        languageCode: 'de'\n      }, {\n        title: 'Vietnamese',\n        languageCode: 'vi'\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    editor.model.schema.extend('$text', {\n      allowAttributes: 'language'\n    });\n    editor.model.schema.setAttributeProperties('language', {\n      copyOnEnter: true\n    });\n\n    this._defineConverters();\n\n    editor.commands.add('textPartLanguage', new TextPartLanguageCommand(editor));\n  }\n  /**\n   * @private\n   */\n\n\n  _defineConverters() {\n    const conversion = this.editor.conversion;\n    conversion.for('upcast').elementToAttribute({\n      model: {\n        key: 'language',\n        value: viewElement => {\n          const languageCode = viewElement.getAttribute('lang');\n          const textDirection = viewElement.getAttribute('dir');\n          return stringifyLanguageAttribute(languageCode, textDirection);\n        }\n      },\n      view: {\n        name: 'span',\n        attributes: {\n          lang: /[\\s\\S]+/\n        }\n      }\n    });\n    conversion.for('downcast').attributeToElement({\n      model: 'language',\n      view: (attributeValue, {\n        writer\n      }) => {\n        if (!attributeValue) {\n          return;\n        }\n\n        const {\n          languageCode,\n          textDirection\n        } = parseLanguageAttribute(attributeValue);\n        return writer.createAttributeElement('span', {\n          lang: languageCode,\n          dir: textDirection\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-language/src/textpartlanguageediting.js"],"names":["Plugin","TextPartLanguageCommand","stringifyLanguageAttribute","parseLanguageAttribute","TextPartLanguageEditing","pluginName","constructor","editor","config","define","textPartLanguage","title","languageCode","init","model","schema","extend","allowAttributes","setAttributeProperties","copyOnEnter","_defineConverters","commands","add","conversion","for","elementToAttribute","key","value","viewElement","getAttribute","textDirection","view","name","attributes","lang","attributeToElement","attributeValue","writer","createAttributeElement","dir"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguageediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport TextPartLanguageCommand from './textpartlanguagecommand';\nimport { stringifyLanguageAttribute, parseLanguageAttribute } from './utils';\n\n/**\n * The text part language editing.\n *\n * Introduces the `'textPartLanguage'` command and the `'language'` model element attribute.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TextPartLanguageEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TextPartLanguageEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// Text part language options are only used to ensure that the feature works by default.\n\t\t// In the real usage it should be reconfigured by a developer. We are not providing\n\t\t// translations for `title` properties on purpose, as it's only an example configuration.\n\t\teditor.config.define( 'language', {\n\t\t\ttextPartLanguage: [\n\t\t\t\t{ title: 'English', languageCode: 'en' },\n\t\t\t\t{ title: 'German', languageCode: 'de' },\n\t\t\t\t{ title: 'Vietnamese', languageCode: 'vi' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.model.schema.extend( '$text', { allowAttributes: 'language' } );\n\t\teditor.model.schema.setAttributeProperties( 'language', {\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\tthis._defineConverters();\n\n\t\teditor.commands.add( 'textPartLanguage', new TextPartLanguageCommand( editor ) );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_defineConverters() {\n\t\tconst conversion = this.editor.conversion;\n\n\t\tconversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: 'language',\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst languageCode = viewElement.getAttribute( 'lang' );\n\t\t\t\t\tconst textDirection = viewElement.getAttribute( 'dir' );\n\n\t\t\t\t\treturn stringifyLanguageAttribute( languageCode, textDirection );\n\t\t\t\t}\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tattributes: { lang: /[\\s\\S]+/ }\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: 'language',\n\t\t\tview: ( attributeValue, { writer } ) => {\n\t\t\t\tif ( !attributeValue ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { languageCode, textDirection } = parseLanguageAttribute( attributeValue );\n\n\t\t\t\treturn writer.createAttributeElement( 'span', {\n\t\t\t\t\tlang: languageCode,\n\t\t\t\t\tdir: textDirection\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}