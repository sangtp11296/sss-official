{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module select-all/selectallcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/guides/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/guides/tutorials/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n *\n * @extends module:core/command~Command\n */\n\nexport default class SelectAllCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  execute() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    let scopeElement = model.schema.getLimitElement(selection); // If an entire scope is selected, or the selection's ancestor is not a scope yet,\n    // browse through ancestors to find the enclosing parent scope.\n\n    if (selection.containsEntireContent(scopeElement) || !isSelectAllScope(model.schema, scopeElement)) {\n      do {\n        scopeElement = scopeElement.parent; // Do nothing, if the entire `root` is already selected.\n\n        if (!scopeElement) {\n          return;\n        }\n      } while (!isSelectAllScope(model.schema, scopeElement));\n    }\n\n    model.change(writer => {\n      writer.setSelection(scopeElement, 'in');\n    });\n  }\n\n} // Checks whether the element is a valid select-all scope.\n// Returns true, if the element is a {@link module:engine/model/schema~Schema#isLimit limit},\n// and can contain any text or paragraph.\n//\n// @param {module:engine/model/schema~Schema} schema The schema to check against.\n// @param {module:engine/model/element~Element} element\n// @return {Boolean}\n\nfunction isSelectAllScope(schema, element) {\n  return schema.isLimit(element) && (schema.checkChild(element, '$text') || schema.checkChild(element, 'paragraph'));\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-select-all/src/selectallcommand.js"],"names":["Command","SelectAllCommand","execute","model","editor","selection","document","scopeElement","schema","getLimitElement","containsEntireContent","isSelectAllScope","parent","change","writer","setSelection","element","isLimit","checkChild"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;AACrD;AACD;AACA;AACCE,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,QAAIE,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAaC,eAAb,CAA8BJ,SAA9B,CAAnB,CAHS,CAKT;AACA;;AACA,QAAKA,SAAS,CAACK,qBAAV,CAAiCH,YAAjC,KAAmD,CAACI,gBAAgB,CAAER,KAAK,CAACK,MAAR,EAAgBD,YAAhB,CAAzE,EAA0G;AACzG,SAAG;AACFA,QAAAA,YAAY,GAAGA,YAAY,CAACK,MAA5B,CADE,CAGF;;AACA,YAAK,CAACL,YAAN,EAAqB;AACpB;AACA;AACD,OAPD,QAOU,CAACI,gBAAgB,CAAER,KAAK,CAACK,MAAR,EAAgBD,YAAhB,CAP3B;AAQA;;AAEDJ,IAAAA,KAAK,CAACU,MAAN,CAAcC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACC,YAAP,CAAqBR,YAArB,EAAmC,IAAnC;AACA,KAFD;AAGA;;AAzBoD,C,CA4BtD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,gBAAT,CAA2BH,MAA3B,EAAmCQ,OAAnC,EAA6C;AAC5C,SAAOR,MAAM,CAACS,OAAP,CAAgBD,OAAhB,MAA+BR,MAAM,CAACU,UAAP,CAAmBF,OAAnB,EAA4B,OAA5B,KAAyCR,MAAM,CAACU,UAAP,CAAmBF,OAAnB,EAA4B,WAA5B,CAAxE,CAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module select-all/selectallcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/guides/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/guides/tutorials/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n *\n * @extends module:core/command~Command\n */\nexport default class SelectAllCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tlet scopeElement = model.schema.getLimitElement( selection );\n\n\t\t// If an entire scope is selected, or the selection's ancestor is not a scope yet,\n\t\t// browse through ancestors to find the enclosing parent scope.\n\t\tif ( selection.containsEntireContent( scopeElement ) || !isSelectAllScope( model.schema, scopeElement ) ) {\n\t\t\tdo {\n\t\t\t\tscopeElement = scopeElement.parent;\n\n\t\t\t\t// Do nothing, if the entire `root` is already selected.\n\t\t\t\tif ( !scopeElement ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while ( !isSelectAllScope( model.schema, scopeElement ) );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( scopeElement, 'in' );\n\t\t} );\n\t}\n}\n\n// Checks whether the element is a valid select-all scope.\n// Returns true, if the element is a {@link module:engine/model/schema~Schema#isLimit limit},\n// and can contain any text or paragraph.\n//\n// @param {module:engine/model/schema~Schema} schema The schema to check against.\n// @param {module:engine/model/element~Element} element\n// @return {Boolean}\nfunction isSelectAllScope( schema, element ) {\n\treturn schema.isLimit( element ) && ( schema.checkChild( element, '$text' ) || schema.checkChild( element, 'paragraph' ) );\n}\n"]},"metadata":{},"sourceType":"module"}