{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkimageui\n */\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { Plugin } from 'ckeditor5/src/core';\nimport LinkUI from './linkui';\nimport LinkEditing from './linkediting';\nimport { LINK_KEYSTROKE } from './utils';\nimport linkIcon from '../theme/icons/link.svg';\n/**\n * The link image UI plugin.\n *\n * This plugin provides the `'linkImage'` button that can be displayed in the {@link module:image/imagetoolbar~ImageToolbar}.\n * It can be used to wrap images in links.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class LinkImageUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [LinkEditing, LinkUI, 'ImageBlockEditing'];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'LinkImageUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const viewDocument = editor.editing.view.document;\n    this.listenTo(viewDocument, 'click', (evt, data) => {\n      if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n        // Prevent browser navigation when clicking a linked image.\n        data.preventDefault(); // Block the `LinkUI` plugin when an image was clicked.\n        // In such a case, we'd like to display the image toolbar.\n\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    });\n\n    this._createToolbarLinkImageButton();\n  }\n  /**\n   * Creates a `LinkImageUI` button view.\n   *\n   * Clicking this button shows a {@link module:link/linkui~LinkUI#_balloon} attached to the selection.\n   * When an image is already linked, the view shows {@link module:link/linkui~LinkUI#actionsView} or\n   * {@link module:link/linkui~LinkUI#formView} if it is not.\n   *\n   * @private\n   */\n\n\n  _createToolbarLinkImageButton() {\n    const editor = this.editor;\n    const t = editor.t;\n    editor.ui.componentFactory.add('linkImage', locale => {\n      const button = new ButtonView(locale);\n      const plugin = editor.plugins.get('LinkUI');\n      const linkCommand = editor.commands.get('link');\n      button.set({\n        isEnabled: true,\n        label: t('Link image'),\n        icon: linkIcon,\n        keystroke: LINK_KEYSTROKE,\n        tooltip: true,\n        isToggleable: true\n      }); // Bind button to the command.\n\n      button.bind('isEnabled').to(linkCommand, 'isEnabled');\n      button.bind('isOn').to(linkCommand, 'value', value => !!value); // Show the actionsView or formView (both from LinkUI) on button click depending on whether the image is linked already.\n\n      this.listenTo(button, 'execute', () => {\n        if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n          plugin._addActionsView();\n        } else {\n          plugin._showUI(true);\n        }\n      });\n      return button;\n    });\n  }\n  /**\n   * Returns true if a linked image (either block or inline) is the only selected element\n   * in the model document.\n   *\n   * @private\n   * @param {module:engine/model/selection~Selection} selection\n   * @returns {Boolean}\n   */\n\n\n  _isSelectedLinkedImage(selection) {\n    const selectedModelElement = selection.getSelectedElement();\n    const imageUtils = this.editor.plugins.get('ImageUtils');\n    return imageUtils.isImage(selectedModelElement) && selectedModelElement.hasAttribute('linkHref');\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-link/src/linkimageui.js"],"names":["ButtonView","Plugin","LinkUI","LinkEditing","LINK_KEYSTROKE","linkIcon","LinkImageUI","requires","pluginName","init","editor","viewDocument","editing","view","document","listenTo","evt","data","_isSelectedLinkedImage","model","selection","preventDefault","stop","priority","_createToolbarLinkImageButton","t","ui","componentFactory","add","locale","button","plugin","plugins","get","linkCommand","commands","set","isEnabled","label","icon","keystroke","tooltip","isToggleable","bind","to","value","_addActionsView","_showUI","selectedModelElement","getSelectedElement","imageUtils","isImage","hasAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkimageui\n */\n\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { Plugin } from 'ckeditor5/src/core';\n\nimport LinkUI from './linkui';\nimport LinkEditing from './linkediting';\n\nimport { LINK_KEYSTROKE } from './utils';\n\nimport linkIcon from '../theme/icons/link.svg';\n\n/**\n * The link image UI plugin.\n *\n * This plugin provides the `'linkImage'` button that can be displayed in the {@link module:image/imagetoolbar~ImageToolbar}.\n * It can be used to wrap images in links.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkImageUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ LinkEditing, LinkUI, 'ImageBlockEditing' ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'LinkImageUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tthis.listenTo( viewDocument, 'click', ( evt, data ) => {\n\t\t\tif ( this._isSelectedLinkedImage( editor.model.document.selection ) ) {\n\t\t\t\t// Prevent browser navigation when clicking a linked image.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\t// Block the `LinkUI` plugin when an image was clicked.\n\t\t\t\t// In such a case, we'd like to display the image toolbar.\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\tthis._createToolbarLinkImageButton();\n\t}\n\n\t/**\n\t * Creates a `LinkImageUI` button view.\n\t *\n\t * Clicking this button shows a {@link module:link/linkui~LinkUI#_balloon} attached to the selection.\n\t * When an image is already linked, the view shows {@link module:link/linkui~LinkUI#actionsView} or\n\t * {@link module:link/linkui~LinkUI#formView} if it is not.\n\t *\n\t * @private\n\t */\n\t_createToolbarLinkImageButton() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'linkImage', locale => {\n\t\t\tconst button = new ButtonView( locale );\n\t\t\tconst plugin = editor.plugins.get( 'LinkUI' );\n\t\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\t\tbutton.set( {\n\t\t\t\tisEnabled: true,\n\t\t\t\tlabel: t( 'Link image' ),\n\t\t\t\ticon: linkIcon,\n\t\t\t\tkeystroke: LINK_KEYSTROKE,\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button to the command.\n\t\t\tbutton.bind( 'isEnabled' ).to( linkCommand, 'isEnabled' );\n\t\t\tbutton.bind( 'isOn' ).to( linkCommand, 'value', value => !!value );\n\n\t\t\t// Show the actionsView or formView (both from LinkUI) on button click depending on whether the image is linked already.\n\t\t\tthis.listenTo( button, 'execute', () => {\n\t\t\t\tif ( this._isSelectedLinkedImage( editor.model.document.selection ) ) {\n\t\t\t\t\tplugin._addActionsView();\n\t\t\t\t} else {\n\t\t\t\t\tplugin._showUI( true );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns true if a linked image (either block or inline) is the only selected element\n\t * in the model document.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection\n\t * @returns {Boolean}\n\t */\n\t_isSelectedLinkedImage( selection ) {\n\t\tconst selectedModelElement = selection.getSelectedElement();\n\t\tconst imageUtils = this.editor.plugins.get( 'ImageUtils' );\n\n\t\treturn imageUtils.isImage( selectedModelElement ) && selectedModelElement.hasAttribute( 'linkHref' );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}