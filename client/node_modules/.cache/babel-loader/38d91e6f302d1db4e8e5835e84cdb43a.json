{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguageui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { stringifyLanguageAttribute } from './utils';\nimport '../theme/language.css';\n/**\n * The text part language UI plugin.\n *\n * It introduces the `'language'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TextPartLanguageUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TextPartLanguageUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    const options = editor.config.get('language.textPartLanguage');\n    const defaultTitle = t('Choose language');\n    const removeTitle = t('Remove language');\n    const dropdownTooltip = t('Language'); // Register UI component.\n\n    editor.ui.componentFactory.add('textPartLanguage', locale => {\n      const itemDefinitions = new Collection();\n      const titles = {};\n      const languageCommand = editor.commands.get('textPartLanguage'); // Item definition with false `languageCode` will behave as remove lang button.\n\n      itemDefinitions.add({\n        type: 'button',\n        model: new Model({\n          label: removeTitle,\n          languageCode: false,\n          withText: true\n        })\n      });\n      itemDefinitions.add({\n        type: 'separator'\n      });\n\n      for (const option of options) {\n        const def = {\n          type: 'button',\n          model: new Model({\n            label: option.title,\n            languageCode: option.languageCode,\n            textDirection: option.textDirection,\n            withText: true\n          })\n        };\n        const language = stringifyLanguageAttribute(option.languageCode, option.textDirection);\n        def.model.bind('isOn').to(languageCommand, 'value', value => value === language);\n        itemDefinitions.add(def);\n        titles[language] = option.title;\n      }\n\n      const dropdownView = createDropdown(locale);\n      addListToDropdown(dropdownView, itemDefinitions);\n      dropdownView.buttonView.set({\n        isOn: false,\n        withText: true,\n        tooltip: dropdownTooltip\n      });\n      dropdownView.extendTemplate({\n        attributes: {\n          class: ['ck-text-fragment-language-dropdown']\n        }\n      });\n      dropdownView.bind('isEnabled').to(languageCommand, 'isEnabled');\n      dropdownView.buttonView.bind('label').to(languageCommand, 'value', value => {\n        return titles[value] || defaultTitle;\n      }); // Execute command when an item from the dropdown is selected.\n\n      this.listenTo(dropdownView, 'execute', evt => {\n        languageCommand.execute({\n          languageCode: evt.source.languageCode,\n          textDirection: evt.source.textDirection\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-language/src/textpartlanguageui.js"],"names":["Plugin","Model","createDropdown","addListToDropdown","Collection","stringifyLanguageAttribute","TextPartLanguageUI","pluginName","init","editor","t","options","config","get","defaultTitle","removeTitle","dropdownTooltip","ui","componentFactory","add","locale","itemDefinitions","titles","languageCommand","commands","type","model","label","languageCode","withText","option","def","title","textDirection","language","bind","to","value","dropdownView","buttonView","set","isOn","tooltip","extendTemplate","attributes","class","listenTo","evt","execute","source","editing","view","focus"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguageui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { stringifyLanguageAttribute } from './utils';\n\nimport '../theme/language.css';\n\n/**\n * The text part language UI plugin.\n *\n * It introduces the `'language'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TextPartLanguageUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TextPartLanguageUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst options = editor.config.get( 'language.textPartLanguage' );\n\t\tconst defaultTitle = t( 'Choose language' );\n\t\tconst removeTitle = t( 'Remove language' );\n\t\tconst dropdownTooltip = t( 'Language' );\n\n\t\t// Register UI component.\n\t\teditor.ui.componentFactory.add( 'textPartLanguage', locale => {\n\t\t\tconst itemDefinitions = new Collection();\n\t\t\tconst titles = {};\n\n\t\t\tconst languageCommand = editor.commands.get( 'textPartLanguage' );\n\n\t\t\t// Item definition with false `languageCode` will behave as remove lang button.\n\t\t\titemDefinitions.add( {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new Model( {\n\t\t\t\t\tlabel: removeTitle,\n\t\t\t\t\tlanguageCode: false,\n\t\t\t\t\twithText: true\n\t\t\t\t} )\n\t\t\t} );\n\n\t\t\titemDefinitions.add( {\n\t\t\t\ttype: 'separator'\n\t\t\t} );\n\n\t\t\tfor ( const option of options ) {\n\t\t\t\tconst def = {\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: new Model( {\n\t\t\t\t\t\tlabel: option.title,\n\t\t\t\t\t\tlanguageCode: option.languageCode,\n\t\t\t\t\t\ttextDirection: option.textDirection,\n\t\t\t\t\t\twithText: true\n\t\t\t\t\t} )\n\t\t\t\t};\n\n\t\t\t\tconst language = stringifyLanguageAttribute( option.languageCode, option.textDirection );\n\n\t\t\t\tdef.model.bind( 'isOn' ).to( languageCommand, 'value', value => value === language );\n\n\t\t\t\titemDefinitions.add( def );\n\n\t\t\t\ttitles[ language ] = option.title;\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tisOn: false,\n\t\t\t\twithText: true,\n\t\t\t\ttooltip: dropdownTooltip\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck-text-fragment-language-dropdown'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( languageCommand, 'isEnabled' );\n\t\t\tdropdownView.buttonView.bind( 'label' ).to( languageCommand, 'value', value => {\n\t\t\t\treturn titles[ value ] || defaultTitle;\n\t\t\t} );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\tlanguageCommand.execute( {\n\t\t\t\t\tlanguageCode: evt.source.languageCode,\n\t\t\t\t\ttextDirection: evt.source.textDirection\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}