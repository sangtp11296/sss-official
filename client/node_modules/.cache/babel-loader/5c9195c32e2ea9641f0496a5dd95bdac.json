{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguagecommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { stringifyLanguageAttribute } from './utils';\n/**\n * The text part language command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class TextPartLanguageCommand extends Command {\n  /**\n   * If the selection starts in a language attribute, the value is set to\n   * the value of that language in a format:\n   *\n   *\t\t<languageCode>:<textDirection>\n   *\n   * * `languageCode` - The language code used for the `lang` attribute in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n   *    format.\n   * * `textDirection` - One of the following values: `rtl` or `ltr`, indicating the reading direction of the language.\n   *\n   * See the {@link module:core/editor/editorconfig~LanguageConfig#textPartLanguage text part language configuration}\n   * for more information about language properties.\n   *\n   * It is set to `false` otherwise.\n   *\n   * @observable\n   * @readonly\n   * @member {Boolean|String} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = this._getValueFromFirstAllowedNode();\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'language');\n  }\n  /**\n   * Executes the command. Applies the attribute to the selection or removes it from the selection.\n   *\n   * If `languageCode` is set to `false` or a `null` value, it will remove attributes. Otherwise, it will set\n   * the attribute in the `{@link #value value}` format.\n   *\n   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n   *\n   * * If the selection is on a range, the command applies the attribute to all nodes in that range\n   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n   * that the selection inherits all attributes from a node if it is in an empty node).\n   *\n   * @fires execute\n   * @param {Object} [options] Command options.\n   * @param {String|Boolean} [options.languageCode] The language code to be applied to the model.\n   * @param {String} [options.textDirection] The language text direction.\n   */\n\n\n  execute({\n    languageCode,\n    textDirection\n  } = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const value = languageCode ? stringifyLanguageAttribute(languageCode, textDirection) : false;\n    model.change(writer => {\n      if (selection.isCollapsed) {\n        if (value) {\n          writer.setSelectionAttribute('language', value);\n        } else {\n          writer.removeSelectionAttribute('language');\n        }\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), 'language');\n\n        for (const range of ranges) {\n          if (value) {\n            writer.setAttribute('language', value, range);\n          } else {\n            writer.removeAttribute('language', range);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Returns the attribute value of the first node in the selection that allows the attribute.\n   * For a collapsed selection it returns the selection attribute.\n   *\n   * @private\n   * @returns {Boolean|String} The attribute value.\n   */\n\n\n  _getValueFromFirstAllowedNode() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selection = model.document.selection;\n\n    if (selection.isCollapsed) {\n      return selection.getAttribute('language') || false;\n    }\n\n    for (const range of selection.getRanges()) {\n      for (const item of range.getItems()) {\n        if (schema.checkAttribute(item, 'language')) {\n          return item.getAttribute('language') || false;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-language/src/textpartlanguagecommand.js"],"names":["Command","stringifyLanguageAttribute","TextPartLanguageCommand","refresh","model","editor","doc","document","value","_getValueFromFirstAllowedNode","isEnabled","schema","checkAttributeInSelection","selection","execute","languageCode","textDirection","change","writer","isCollapsed","setSelectionAttribute","removeSelectionAttribute","ranges","getValidRanges","getRanges","range","setAttribute","removeAttribute","getAttribute","item","getItems","checkAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module language/textpartlanguagecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { stringifyLanguageAttribute } from './utils';\n\n/**\n * The text part language command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class TextPartLanguageCommand extends Command {\n\t/**\n\t * If the selection starts in a language attribute, the value is set to\n\t * the value of that language in a format:\n\t *\n\t *\t\t<languageCode>:<textDirection>\n\t *\n\t * * `languageCode` - The language code used for the `lang` attribute in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n\t *    format.\n\t * * `textDirection` - One of the following values: `rtl` or `ltr`, indicating the reading direction of the language.\n\t *\n\t * See the {@link module:core/editor/editorconfig~LanguageConfig#textPartLanguage text part language configuration}\n\t * for more information about language properties.\n\t *\n\t * It is set to `false` otherwise.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Boolean|String} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'language' );\n\t}\n\n\t/**\n\t * Executes the command. Applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If `languageCode` is set to `false` or a `null` value, it will remove attributes. Otherwise, it will set\n\t * the attribute in the `{@link #value value}` format.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {String|Boolean} [options.languageCode] The language code to be applied to the model.\n\t * @param {String} [options.textDirection] The language text direction.\n\t */\n\texecute( { languageCode, textDirection } = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst value = languageCode ? stringifyLanguageAttribute( languageCode, textDirection ) : false;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( 'language', value );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( 'language' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'language' );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( 'language', value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( 'language', range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value of the first node in the selection that allows the attribute.\n\t * For a collapsed selection it returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean|String} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.getAttribute( 'language' ) || false;\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, 'language' ) ) {\n\t\t\t\t\treturn item.getAttribute( 'language' ) || false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}