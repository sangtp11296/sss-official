{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module source-editing/utils/formathtml\n */\n\n/**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param {String} input An HTML string to format.\n * @returns {String}\n */\nexport function formatHtml(input) {\n  // A list of block-like elements around which the new lines should be inserted, and within which\n  // the indentation of their children should be increased.\n  // The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n  // a full list of HTML block-level elements.\n  // A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n  const elementsToFormat = [{\n    name: 'address',\n    isVoid: false\n  }, {\n    name: 'article',\n    isVoid: false\n  }, {\n    name: 'aside',\n    isVoid: false\n  }, {\n    name: 'blockquote',\n    isVoid: false\n  }, {\n    name: 'br',\n    isVoid: true\n  }, {\n    name: 'details',\n    isVoid: false\n  }, {\n    name: 'dialog',\n    isVoid: false\n  }, {\n    name: 'dd',\n    isVoid: false\n  }, {\n    name: 'div',\n    isVoid: false\n  }, {\n    name: 'dl',\n    isVoid: false\n  }, {\n    name: 'dt',\n    isVoid: false\n  }, {\n    name: 'fieldset',\n    isVoid: false\n  }, {\n    name: 'figcaption',\n    isVoid: false\n  }, {\n    name: 'figure',\n    isVoid: false\n  }, {\n    name: 'footer',\n    isVoid: false\n  }, {\n    name: 'form',\n    isVoid: false\n  }, {\n    name: 'h1',\n    isVoid: false\n  }, {\n    name: 'h2',\n    isVoid: false\n  }, {\n    name: 'h3',\n    isVoid: false\n  }, {\n    name: 'h4',\n    isVoid: false\n  }, {\n    name: 'h5',\n    isVoid: false\n  }, {\n    name: 'h6',\n    isVoid: false\n  }, {\n    name: 'header',\n    isVoid: false\n  }, {\n    name: 'hgroup',\n    isVoid: false\n  }, {\n    name: 'hr',\n    isVoid: true\n  }, {\n    name: 'input',\n    isVoid: true\n  }, {\n    name: 'li',\n    isVoid: false\n  }, {\n    name: 'main',\n    isVoid: false\n  }, {\n    name: 'nav',\n    isVoid: false\n  }, {\n    name: 'ol',\n    isVoid: false\n  }, {\n    name: 'p',\n    isVoid: false\n  }, {\n    name: 'pre',\n    isVoid: false\n  }, {\n    name: 'section',\n    isVoid: false\n  }, {\n    name: 'table',\n    isVoid: false\n  }, {\n    name: 'tbody',\n    isVoid: false\n  }, {\n    name: 'td',\n    isVoid: false\n  }, {\n    name: 'textarea',\n    isVoid: false\n  }, {\n    name: 'th',\n    isVoid: false\n  }, {\n    name: 'thead',\n    isVoid: false\n  }, {\n    name: 'tr',\n    isVoid: false\n  }, {\n    name: 'ul',\n    isVoid: false\n  }];\n  const elementNamesToFormat = elementsToFormat.map(element => element.name).join('|'); // It is not the fastest way to format the HTML markup but the performance should be good enough.\n\n  const lines = input // Add new line before and after `<tag>` and `</tag>`.\n  // It may separate individual elements with two new lines, but this will be fixed below.\n  .replace(new RegExp(`</?(${elementNamesToFormat})( .*?)?>`, 'g'), '\\n$&\\n') // Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n  .split('\\n');\n  let indentCount = 0;\n  return lines.filter(line => line.length).map(line => {\n    if (isNonVoidOpeningTag(line, elementsToFormat)) {\n      return indentLine(line, indentCount++);\n    }\n\n    if (isClosingTag(line, elementsToFormat)) {\n      return indentLine(line, --indentCount);\n    }\n\n    return indentLine(line, indentCount);\n  }).join('\\n');\n} // Checks, if an argument is an opening tag of a non-void element to be formatted.\n//\n// @param {String} line String to check.\n// @param {Array} elementsToFormat Elements to be formatted.\n// @param {String} elementsToFormat.name Element name.\n// @param {Boolean} elementsToFormat.isVoid Flag indicating whether element is a void one.\n// @returns {Boolean}\n\nfunction isNonVoidOpeningTag(line, elementsToFormat) {\n  return elementsToFormat.some(element => {\n    if (element.isVoid) {\n      return false;\n    }\n\n    if (!new RegExp(`<${element.name}( .*?)?>`).test(line)) {\n      return false;\n    }\n\n    return true;\n  });\n} // Checks, if an argument is a closing tag.\n//\n// @param {String} line String to check.\n// @param {Array} elementsToFormat Elements to be formatted.\n// @param {String} elementsToFormat.name Element name.\n// @param {Boolean} elementsToFormat.isVoid Flag indicating whether element is a void one.\n// @returns {Boolean}\n\n\nfunction isClosingTag(line, elementsToFormat) {\n  return elementsToFormat.some(element => {\n    return new RegExp(`</${element.name}>`).test(line);\n  });\n} // Indents a line by a specified number of characters.\n//\n// @param {String} line Line to indent.\n// @param {Number} indentCount Number of characters to use for indentation.\n// @param {String} [indentChar] Indentation character(s). 4 spaces by default.\n// @returns {String}\n\n\nfunction indentLine(line, indentCount, indentChar = '    ') {\n  return `${indentChar.repeat(indentCount)}${line}`;\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-source-editing/src/utils/formathtml.js"],"names":["formatHtml","input","elementsToFormat","name","isVoid","elementNamesToFormat","map","element","join","lines","replace","RegExp","split","indentCount","filter","line","length","isNonVoidOpeningTag","indentLine","isClosingTag","some","test","indentChar","repeat"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module source-editing/utils/formathtml\n */\n\n/**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param {String} input An HTML string to format.\n * @returns {String}\n */\nexport function formatHtml( input ) {\n\t// A list of block-like elements around which the new lines should be inserted, and within which\n\t// the indentation of their children should be increased.\n\t// The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n\t// a full list of HTML block-level elements.\n\t// A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n\tconst elementsToFormat = [\n\t\t{ name: 'address', isVoid: false },\n\t\t{ name: 'article', isVoid: false },\n\t\t{ name: 'aside', isVoid: false },\n\t\t{ name: 'blockquote', isVoid: false },\n\t\t{ name: 'br', isVoid: true },\n\t\t{ name: 'details', isVoid: false },\n\t\t{ name: 'dialog', isVoid: false },\n\t\t{ name: 'dd', isVoid: false },\n\t\t{ name: 'div', isVoid: false },\n\t\t{ name: 'dl', isVoid: false },\n\t\t{ name: 'dt', isVoid: false },\n\t\t{ name: 'fieldset', isVoid: false },\n\t\t{ name: 'figcaption', isVoid: false },\n\t\t{ name: 'figure', isVoid: false },\n\t\t{ name: 'footer', isVoid: false },\n\t\t{ name: 'form', isVoid: false },\n\t\t{ name: 'h1', isVoid: false },\n\t\t{ name: 'h2', isVoid: false },\n\t\t{ name: 'h3', isVoid: false },\n\t\t{ name: 'h4', isVoid: false },\n\t\t{ name: 'h5', isVoid: false },\n\t\t{ name: 'h6', isVoid: false },\n\t\t{ name: 'header', isVoid: false },\n\t\t{ name: 'hgroup', isVoid: false },\n\t\t{ name: 'hr', isVoid: true },\n\t\t{ name: 'input', isVoid: true },\n\t\t{ name: 'li', isVoid: false },\n\t\t{ name: 'main', isVoid: false },\n\t\t{ name: 'nav', isVoid: false },\n\t\t{ name: 'ol', isVoid: false },\n\t\t{ name: 'p', isVoid: false },\n\t\t{ name: 'pre', isVoid: false },\n\t\t{ name: 'section', isVoid: false },\n\t\t{ name: 'table', isVoid: false },\n\t\t{ name: 'tbody', isVoid: false },\n\t\t{ name: 'td', isVoid: false },\n\t\t{ name: 'textarea', isVoid: false },\n\t\t{ name: 'th', isVoid: false },\n\t\t{ name: 'thead', isVoid: false },\n\t\t{ name: 'tr', isVoid: false },\n\t\t{ name: 'ul', isVoid: false }\n\t];\n\n\tconst elementNamesToFormat = elementsToFormat.map( element => element.name ).join( '|' );\n\n\t// It is not the fastest way to format the HTML markup but the performance should be good enough.\n\tconst lines = input\n\t\t// Add new line before and after `<tag>` and `</tag>`.\n\t\t// It may separate individual elements with two new lines, but this will be fixed below.\n\t\t.replace( new RegExp( `</?(${ elementNamesToFormat })( .*?)?>`, 'g' ), '\\n$&\\n' )\n\t\t// Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n\t\t.split( '\\n' );\n\n\tlet indentCount = 0;\n\n\treturn lines\n\t\t.filter( line => line.length )\n\t\t.map( line => {\n\t\t\tif ( isNonVoidOpeningTag( line, elementsToFormat ) ) {\n\t\t\t\treturn indentLine( line, indentCount++ );\n\t\t\t}\n\n\t\t\tif ( isClosingTag( line, elementsToFormat ) ) {\n\t\t\t\treturn indentLine( line, --indentCount );\n\t\t\t}\n\n\t\t\treturn indentLine( line, indentCount );\n\t\t} )\n\t\t.join( '\\n' );\n}\n\n// Checks, if an argument is an opening tag of a non-void element to be formatted.\n//\n// @param {String} line String to check.\n// @param {Array} elementsToFormat Elements to be formatted.\n// @param {String} elementsToFormat.name Element name.\n// @param {Boolean} elementsToFormat.isVoid Flag indicating whether element is a void one.\n// @returns {Boolean}\nfunction isNonVoidOpeningTag( line, elementsToFormat ) {\n\treturn elementsToFormat.some( element => {\n\t\tif ( element.isVoid ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !new RegExp( `<${ element.name }( .*?)?>` ).test( line ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} );\n}\n\n// Checks, if an argument is a closing tag.\n//\n// @param {String} line String to check.\n// @param {Array} elementsToFormat Elements to be formatted.\n// @param {String} elementsToFormat.name Element name.\n// @param {Boolean} elementsToFormat.isVoid Flag indicating whether element is a void one.\n// @returns {Boolean}\nfunction isClosingTag( line, elementsToFormat ) {\n\treturn elementsToFormat.some( element => {\n\t\treturn new RegExp( `</${ element.name }>` ).test( line );\n\t} );\n}\n\n// Indents a line by a specified number of characters.\n//\n// @param {String} line Line to indent.\n// @param {Number} indentCount Number of characters to use for indentation.\n// @param {String} [indentChar] Indentation character(s). 4 spaces by default.\n// @returns {String}\nfunction indentLine( line, indentCount, indentChar = '    ' ) {\n\treturn `${ indentChar.repeat( indentCount ) }${ line }`;\n}\n"]},"metadata":{},"sourceType":"module"}