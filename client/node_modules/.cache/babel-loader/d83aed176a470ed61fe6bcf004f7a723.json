{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module source-editing/sourceediting\n */\n\n/* global console */\nimport { Plugin, PendingActions } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { createElement, ElementReplacer } from 'ckeditor5/src/utils';\nimport { formatHtml } from './utils/formathtml';\nimport '../theme/sourceediting.css';\nimport sourceEditingIcon from '../theme/icons/source-editing.svg';\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class SourceEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'SourceEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [PendingActions];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * Flag indicating whether the document source mode is active.\n     *\n     * @observable\n     * @member {Boolean}\n     */\n\n    this.set('isSourceEditingMode', false);\n    /**\n     * The element replacer instance used to replace the editing roots with the wrapper elements containing the document source.\n     *\n     * @private\n     * @member {module:utils/elementreplacer~ElementReplacer}\n     */\n\n    this._elementReplacer = new ElementReplacer();\n    /**\n     * Maps all root names to wrapper elements containing the document source.\n     *\n     * @private\n     * @member {Map.<String,HTMLElement>}\n     */\n\n    this._replacedRoots = new Map();\n    /**\n     * Maps all root names to their document data.\n     *\n     * @private\n     * @member {Map.<String,String>}\n     */\n\n    this._dataFromRoots = new Map();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    editor.ui.componentFactory.add('sourceEditing', locale => {\n      const buttonView = new ButtonView(locale);\n      buttonView.set({\n        label: t('Source'),\n        icon: sourceEditingIcon,\n        tooltip: true,\n        withText: true,\n        class: 'ck-source-editing-button'\n      });\n      buttonView.bind('isOn').to(this, 'isSourceEditingMode'); // The button should be disabled if one of the following conditions is met:\n\n      buttonView.bind('isEnabled').to(this, 'isEnabled', editor, 'isReadOnly', editor.plugins.get(PendingActions), 'hasAny', (isEnabled, isEditorReadOnly, hasAnyPendingActions) => {\n        // (1) The plugin itself is disabled.\n        if (!isEnabled) {\n          return false;\n        } // (2) The editor is in read-only mode.\n\n\n        if (isEditorReadOnly) {\n          return false;\n        } // (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n        // until the model is finally set.\n\n\n        if (hasAnyPendingActions) {\n          return false;\n        }\n\n        return true;\n      });\n      this.listenTo(buttonView, 'execute', () => {\n        this.isSourceEditingMode = !this.isSourceEditingMode;\n      });\n      return buttonView;\n    }); // Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n    // integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n\n    if (this._isAllowedToHandleSourceEditingMode()) {\n      this.on('change:isSourceEditingMode', (evt, name, isSourceEditingMode) => {\n        if (isSourceEditingMode) {\n          this._showSourceEditing();\n\n          this._disableCommands();\n        } else {\n          this._hideSourceEditing();\n\n          this._enableCommands();\n        }\n      });\n      this.on('change:isEnabled', (evt, name, isEnabled) => this._handleReadOnlyMode(!isEnabled));\n      this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly) => this._handleReadOnlyMode(isReadOnly));\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const editor = this.editor;\n    const collaborationPluginNamesToWarn = ['RealTimeCollaborativeEditing', 'CommentsEditing', 'TrackChangesEditing', 'RevisionHistory']; // Currently, the basic integration with Collaboration Features is to display a warning in the console.\n\n    if (collaborationPluginNamesToWarn.some(pluginName => editor.plugins.has(pluginName))) {\n      console.warn('You initialized the editor with the source editing feature and at least one of the collaboration features. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the collaboration features.');\n    } // Restricted Editing integration can also lead to problems. Warn the user accordingly.\n\n\n    if (editor.plugins.has('RestrictedEditingModeEditing')) {\n      console.warn('You initialized the editor with the source editing feature and restricted editing feature. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the restricted editing feature.');\n    }\n  }\n  /**\n   * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n   * root.\n   *\n   * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n   * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n   * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n   * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n   * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n   * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n   * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n   * Since both children occupy the same grid cell, both have always the same height.\n   *\n   * @private\n   */\n\n\n  _showSourceEditing() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    const model = editor.model;\n    model.change(writer => {\n      writer.setSelection(null);\n      writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n    }); // It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n    // main root, but this code may help understand and use this feature in external integrations.\n\n    for (const [rootName, domRootElement] of editingView.domRoots) {\n      const data = formatSource(editor.data.get({\n        rootName\n      }));\n      const domSourceEditingElementTextarea = createElement(domRootElement.ownerDocument, 'textarea', {\n        rows: '1'\n      });\n      const domSourceEditingElementWrapper = createElement(domRootElement.ownerDocument, 'div', {\n        class: 'ck-source-editing-area',\n        'data-value': data\n      }, [domSourceEditingElementTextarea]);\n      domSourceEditingElementTextarea.value = data; // Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n\n      domSourceEditingElementTextarea.setSelectionRange(0, 0); // Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n      // wrapper's `data-value` property.\n\n      domSourceEditingElementTextarea.addEventListener('input', () => {\n        domSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n      });\n      editingView.change(writer => {\n        const viewRoot = editingView.document.getRoot(rootName);\n        writer.addClass('ck-hidden', viewRoot);\n      });\n\n      this._replacedRoots.set(rootName, domSourceEditingElementWrapper);\n\n      this._elementReplacer.replace(domRootElement, domSourceEditingElementWrapper);\n\n      this._dataFromRoots.set(rootName, data);\n    }\n\n    this._focusSourceEditing();\n  }\n  /**\n   * Restores all hidden editing roots and sets the source data in them.\n   *\n   * @private\n   */\n\n\n  _hideSourceEditing() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    const data = {};\n\n    for (const [rootName, domSourceEditingElementWrapper] of this._replacedRoots) {\n      const oldData = this._dataFromRoots.get(rootName);\n\n      const newData = domSourceEditingElementWrapper.dataset.value; // Do not set the data unless some changes have been made in the meantime.\n      // This prevents empty undo steps after switching to the normal editor.\n\n      if (oldData !== newData) {\n        data[rootName] = newData;\n      }\n\n      editingView.change(writer => {\n        const viewRoot = editingView.document.getRoot(rootName);\n        writer.removeClass('ck-hidden', viewRoot);\n      });\n    }\n\n    this._elementReplacer.restore();\n\n    this._replacedRoots.clear();\n\n    this._dataFromRoots.clear();\n\n    if (Object.keys(data).length) {\n      editor.data.set(data, {\n        batchType: 'default'\n      });\n    }\n\n    editor.editing.view.focus();\n  }\n  /**\n   * Focuses the textarea containing document source from the first editing root.\n   *\n   * @private\n   */\n\n\n  _focusSourceEditing() {\n    const [domSourceEditingElementWrapper] = this._replacedRoots.values();\n\n    const textarea = domSourceEditingElementWrapper.querySelector('textarea');\n    textarea.focus();\n  }\n  /**\n   * Disables all commands.\n   *\n   * @private\n   */\n\n\n  _disableCommands() {\n    const editor = this.editor;\n\n    for (const command of editor.commands.commands()) {\n      command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n    }\n  }\n  /**\n   * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n   *\n   * @private\n   */\n\n\n  _enableCommands() {\n    const editor = this.editor;\n\n    for (const command of editor.commands.commands()) {\n      command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n    }\n  }\n  /**\n   * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n   *\n   * @param {Boolean} isReadOnly Indicates whether all textarea elements should be read-only.\n   */\n\n\n  _handleReadOnlyMode(isReadOnly) {\n    if (!this.isSourceEditingMode) {\n      return;\n    }\n\n    for (const [, domSourceEditingElementWrapper] of this._replacedRoots) {\n      domSourceEditingElementWrapper.querySelector('textarea').readOnly = isReadOnly;\n    }\n  }\n  /**\n   * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n   * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n   *\n   * @private\n   * @returns {Boolean}\n   */\n\n\n  _isAllowedToHandleSourceEditingMode() {\n    const editor = this.editor;\n    const editable = editor.ui.view.editable; // Checks, if the editor's editable belongs to the editor's DOM tree.\n\n    return editable && !editable._hasExternalElement;\n  }\n\n} // Formats the content for a better readability.\n//\n// For a non-HTML source the unchanged input string is returned.\n//\n// @param {String} input Input string to check.\n// @returns {Boolean}\n\nfunction formatSource(input) {\n  if (!isHtml(input)) {\n    return input;\n  }\n\n  return formatHtml(input);\n} // Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n//\n// @param {String} input Input string to check.\n// @returns {Boolean}\n\n\nfunction isHtml(input) {\n  return input.startsWith('<');\n}","map":{"version":3,"sources":["C:/Users/sangt/OneDrive/Sang Shares Something/sss-official/client/node_modules/@ckeditor/ckeditor5-source-editing/src/sourceediting.js"],"names":["Plugin","PendingActions","ButtonView","createElement","ElementReplacer","formatHtml","sourceEditingIcon","COMMAND_FORCE_DISABLE_ID","SourceEditing","pluginName","requires","constructor","editor","set","_elementReplacer","_replacedRoots","Map","_dataFromRoots","init","t","ui","componentFactory","add","locale","buttonView","label","icon","tooltip","withText","class","bind","to","plugins","get","isEnabled","isEditorReadOnly","hasAnyPendingActions","listenTo","isSourceEditingMode","_isAllowedToHandleSourceEditingMode","on","evt","name","_showSourceEditing","_disableCommands","_hideSourceEditing","_enableCommands","_handleReadOnlyMode","isReadOnly","afterInit","collaborationPluginNamesToWarn","some","has","console","warn","editingView","editing","view","model","change","writer","setSelection","removeSelectionAttribute","document","selection","getAttributeKeys","rootName","domRootElement","domRoots","data","formatSource","domSourceEditingElementTextarea","ownerDocument","rows","domSourceEditingElementWrapper","value","setSelectionRange","addEventListener","dataset","viewRoot","getRoot","addClass","replace","_focusSourceEditing","oldData","newData","removeClass","restore","clear","Object","keys","length","batchType","focus","values","textarea","querySelector","command","commands","forceDisabled","clearForceDisabled","readOnly","editable","_hasExternalElement","input","isHtml","startsWith"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module source-editing/sourceediting\n */\n\n/* global console */\n\nimport { Plugin, PendingActions } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { createElement, ElementReplacer } from 'ckeditor5/src/utils';\nimport { formatHtml } from './utils/formathtml';\n\nimport '../theme/sourceediting.css';\n\nimport sourceEditingIcon from '../theme/icons/source-editing.svg';\n\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class SourceEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'SourceEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ PendingActions ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Flag indicating whether the document source mode is active.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.set( 'isSourceEditingMode', false );\n\n\t\t/**\n\t\t * The element replacer instance used to replace the editing roots with the wrapper elements containing the document source.\n\t\t *\n\t\t * @private\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\n\t\t/**\n\t\t * Maps all root names to wrapper elements containing the document source.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,HTMLElement>}\n\t\t */\n\t\tthis._replacedRoots = new Map();\n\n\t\t/**\n\t\t * Maps all root names to their document data.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,String>}\n\t\t */\n\t\tthis._dataFromRoots = new Map();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'sourceEditing', locale => {\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: t( 'Source' ),\n\t\t\t\ticon: sourceEditingIcon,\n\t\t\t\ttooltip: true,\n\t\t\t\twithText: true,\n\t\t\t\tclass: 'ck-source-editing-button'\n\t\t\t} );\n\n\t\t\tbuttonView.bind( 'isOn' ).to( this, 'isSourceEditingMode' );\n\n\t\t\t// The button should be disabled if one of the following conditions is met:\n\t\t\tbuttonView.bind( 'isEnabled' ).to(\n\t\t\t\tthis, 'isEnabled',\n\t\t\t\teditor, 'isReadOnly',\n\t\t\t\teditor.plugins.get( PendingActions ), 'hasAny',\n\t\t\t\t( isEnabled, isEditorReadOnly, hasAnyPendingActions ) => {\n\t\t\t\t\t// (1) The plugin itself is disabled.\n\t\t\t\t\tif ( !isEnabled ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// (2) The editor is in read-only mode.\n\t\t\t\t\tif ( isEditorReadOnly ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n\t\t\t\t\t// until the model is finally set.\n\t\t\t\t\tif ( hasAnyPendingActions ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\t\tthis.isSourceEditingMode = !this.isSourceEditingMode;\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\n\t\t// Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n\t\t// integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n\t\tif ( this._isAllowedToHandleSourceEditingMode() ) {\n\t\t\tthis.on( 'change:isSourceEditingMode', ( evt, name, isSourceEditingMode ) => {\n\t\t\t\tif ( isSourceEditingMode ) {\n\t\t\t\t\tthis._showSourceEditing();\n\t\t\t\t\tthis._disableCommands();\n\t\t\t\t} else {\n\t\t\t\t\tthis._hideSourceEditing();\n\t\t\t\t\tthis._enableCommands();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.on( 'change:isEnabled', ( evt, name, isEnabled ) => this._handleReadOnlyMode( !isEnabled ) );\n\n\t\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, isReadOnly ) => this._handleReadOnlyMode( isReadOnly ) );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\n\t\tconst collaborationPluginNamesToWarn = [\n\t\t\t'RealTimeCollaborativeEditing',\n\t\t\t'CommentsEditing',\n\t\t\t'TrackChangesEditing',\n\t\t\t'RevisionHistory'\n\t\t];\n\n\t\t// Currently, the basic integration with Collaboration Features is to display a warning in the console.\n\t\tif ( collaborationPluginNamesToWarn.some( pluginName => editor.plugins.has( pluginName ) ) ) {\n\t\t\tconsole.warn(\n\t\t\t\t'You initialized the editor with the source editing feature and at least one of the collaboration features. ' +\n\t\t\t\t'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n\t\t\t\t'that contains markers created by the collaboration features.'\n\t\t\t);\n\t\t}\n\n\t\t// Restricted Editing integration can also lead to problems. Warn the user accordingly.\n\t\tif ( editor.plugins.has( 'RestrictedEditingModeEditing' ) ) {\n\t\t\tconsole.warn(\n\t\t\t\t'You initialized the editor with the source editing feature and restricted editing feature. ' +\n\t\t\t\t'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n\t\t\t\t'that contains markers created by the restricted editing feature.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n\t * root.\n\t *\n\t * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n\t * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n\t * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n\t * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n\t * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n\t * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n\t * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n\t * Since both children occupy the same grid cell, both have always the same height.\n\t *\n\t * @private\n\t */\n\t_showSourceEditing() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( model.document.selection.getAttributeKeys() );\n\t\t} );\n\n\t\t// It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n\t\t// main root, but this code may help understand and use this feature in external integrations.\n\t\tfor ( const [ rootName, domRootElement ] of editingView.domRoots ) {\n\t\t\tconst data = formatSource( editor.data.get( { rootName } ) );\n\n\t\t\tconst domSourceEditingElementTextarea = createElement( domRootElement.ownerDocument, 'textarea', { rows: '1' } );\n\n\t\t\tconst domSourceEditingElementWrapper = createElement( domRootElement.ownerDocument, 'div', {\n\t\t\t\tclass: 'ck-source-editing-area',\n\t\t\t\t'data-value': data\n\t\t\t}, [ domSourceEditingElementTextarea ] );\n\n\t\t\tdomSourceEditingElementTextarea.value = data;\n\n\t\t\t// Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n\t\t\tdomSourceEditingElementTextarea.setSelectionRange( 0, 0 );\n\n\t\t\t// Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n\t\t\t// wrapper's `data-value` property.\n\t\t\tdomSourceEditingElementTextarea.addEventListener( 'input', () => {\n\t\t\t\tdomSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n\t\t\t} );\n\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( rootName );\n\n\t\t\t\twriter.addClass( 'ck-hidden', viewRoot );\n\t\t\t} );\n\n\t\t\tthis._replacedRoots.set( rootName, domSourceEditingElementWrapper );\n\n\t\t\tthis._elementReplacer.replace( domRootElement, domSourceEditingElementWrapper );\n\n\t\t\tthis._dataFromRoots.set( rootName, data );\n\t\t}\n\n\t\tthis._focusSourceEditing();\n\t}\n\n\t/**\n\t * Restores all hidden editing roots and sets the source data in them.\n\t *\n\t * @private\n\t */\n\t_hideSourceEditing() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst data = {};\n\n\t\tfor ( const [ rootName, domSourceEditingElementWrapper ] of this._replacedRoots ) {\n\t\t\tconst oldData = this._dataFromRoots.get( rootName );\n\t\t\tconst newData = domSourceEditingElementWrapper.dataset.value;\n\n\t\t\t// Do not set the data unless some changes have been made in the meantime.\n\t\t\t// This prevents empty undo steps after switching to the normal editor.\n\t\t\tif ( oldData !== newData ) {\n\t\t\t\tdata[ rootName ] = newData;\n\t\t\t}\n\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( rootName );\n\n\t\t\t\twriter.removeClass( 'ck-hidden', viewRoot );\n\t\t\t} );\n\t\t}\n\n\t\tthis._elementReplacer.restore();\n\n\t\tthis._replacedRoots.clear();\n\n\t\tthis._dataFromRoots.clear();\n\n\t\tif ( Object.keys( data ).length ) {\n\t\t\teditor.data.set( data, { batchType: 'default' } );\n\t\t}\n\n\t\teditor.editing.view.focus();\n\t}\n\n\t/**\n\t * Focuses the textarea containing document source from the first editing root.\n\t *\n\t * @private\n\t */\n\t_focusSourceEditing() {\n\t\tconst [ domSourceEditingElementWrapper ] = this._replacedRoots.values();\n\n\t\tconst textarea = domSourceEditingElementWrapper.querySelector( 'textarea' );\n\n\t\ttextarea.focus();\n\t}\n\n\t/**\n\t * Disables all commands.\n\t *\n\t * @private\n\t */\n\t_disableCommands() {\n\t\tconst editor = this.editor;\n\n\t\tfor ( const command of editor.commands.commands() ) {\n\t\t\tcommand.forceDisabled( COMMAND_FORCE_DISABLE_ID );\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n\t *\n\t * @private\n\t */\n\t_enableCommands() {\n\t\tconst editor = this.editor;\n\n\t\tfor ( const command of editor.commands.commands() ) {\n\t\t\tcommand.clearForceDisabled( COMMAND_FORCE_DISABLE_ID );\n\t\t}\n\t}\n\n\t/**\n\t * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n\t *\n\t * @param {Boolean} isReadOnly Indicates whether all textarea elements should be read-only.\n\t */\n\t_handleReadOnlyMode( isReadOnly ) {\n\t\tif ( !this.isSourceEditingMode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const [ , domSourceEditingElementWrapper ] of this._replacedRoots ) {\n\t\t\tdomSourceEditingElementWrapper.querySelector( 'textarea' ).readOnly = isReadOnly;\n\t\t}\n\t}\n\n\t/**\n\t * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n\t * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_isAllowedToHandleSourceEditingMode() {\n\t\tconst editor = this.editor;\n\t\tconst editable = editor.ui.view.editable;\n\n\t\t// Checks, if the editor's editable belongs to the editor's DOM tree.\n\t\treturn editable && !editable._hasExternalElement;\n\t}\n}\n\n// Formats the content for a better readability.\n//\n// For a non-HTML source the unchanged input string is returned.\n//\n// @param {String} input Input string to check.\n// @returns {Boolean}\nfunction formatSource( input ) {\n\tif ( !isHtml( input ) ) {\n\t\treturn input;\n\t}\n\n\treturn formatHtml( input );\n}\n\n// Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n//\n// @param {String} input Input string to check.\n// @returns {Boolean}\nfunction isHtml( input ) {\n\treturn input.startsWith( '<' );\n}\n"]},"metadata":{},"sourceType":"module"}